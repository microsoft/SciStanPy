// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

real log_multinomial_coeff(array[] int n) {
    // Computes the log of the multinomial coefficient for a vector n.

    // Get the log factorial of the sum of n
    real coeff = lgamma(sum(n) + 1);

    // Subtract the log factorial of each element in n
    for (i in 1:size(n)) {
        coeff -= lgamma(n[i] + 1);
    }

    return coeff;
}

real multinomial_logtheta_unnorm_lpmf(array[] int n, vector log_theta) {
    // Unnormalized log probability density function for the multinomial distribution
    // parametrized using the log of the probabilities (log_theta).
    return to_row_vector(n) * log_theta;
}

real multinomial_logtheta_norm_lpmf(array[] int n, vector log_theta) {
    // Log probability density function for the multinomial distribution parametrized
    // using the log of the probabilities (log_theta).
    return log_multinomial_coeff(n) + multinomial_logtheta_unnorm_lpmf(n | log_theta);
}

real multinomial_logtheta_manual_norm_lpmf(array[] int n, vector log_theta, real coeff) {
    // Log probability density function for the multinomial distribution parametrized
    // using the log of the probabilities (log_theta). This is calculated by providing
    // a pre-calculated normalization constant.
    return coeff + multinomial_logtheta_unnorm_lpmf(n | log_theta);
}

array[] int multinomial_logtheta_rng(vector log_theta, int N) {
    // Generate a random sample from the multinomial distribution parametrized
    // using the log of the probabilities (log_theta).
    return multinomial_rng(exp(log_theta), N);
}